cargo-features = ["codegen-backend"]

[workspace]
members = ["crates/*"]
resolver = "2"

[workspace.dependencies]
anyhow = { version = "1.0.75", features = ["backtrace"] }
jwalk = "0.5"
napi = { version = "2.16.6", default-features = false, features = [
    "compat-mode",
    "napi4",
] }
napi-derive = "2.16.9"
parking_lot = { version = "0.12.3", features = ["deadlock_detection"] }
path-clean = "0.1.0"
path-slash = "0.2.1"
pretty_assertions = "1.4.0"
rayon = "1.5.1"
regex = "1"
relative-path = "1.7.2"
serde = { version = "1.0.117", features = ["rc", "derive"] }
serde_json = "1.0.59"
swc_common = "0.37.4"
swc_compiler_base = "0.18.1"
swc_ecma_ast = "0.118.2"
swc_ecma_loader = "0.49.1"
swc_ecma_parser = "0.149.0"
swc_ecma_transforms = "0.238.0"
swc_ecma_visit = "0.104.6"
thiserror = "1.0.52"
schemars = "0.8.21"
glob-match = "0.2.1"

[profile.release]
# Build with debug info, but split it into separate pdb files we don't need to distribute
debug = true
split-debuginfo = "packed"
# optimises for speed over size
opt-level = "s"
# run link-time optimisation for release builds.
# This will make the final binary take longer to build, but can result in faster, samller  code.
lto = true
# on panic, abort instead of unwinding. This allows us to avoid gimli (rust's stack unwinder
# but also makes debugging from stack traces harder.
# panic = "abort"

[profile.dev]
debug = true
# codegen-backend = "cranelift"

[profile.test]
debug = true
# separate profile from 'dev' so it won't use the cranelift backend
