name: publish artifacts
on:
  push:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: publish-${{ github.workflow }}
  cancel-in-progress: true
permissions:
  contents: write
jobs:
  tests:
    uses: Adjective-Object/good-fences-rs-core/.github/workflows/unittest.yml@main
  publish:
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BEACHBALL_PUSH_PAT }}
      - name: pull x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
      - name: pull aarch64-unknown-linux-gnu
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
      - name: pull x86_64-apple-darwin
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
      - name: pull aarch64-apple-darwin
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
      - name: pull x86_64-pc-windows-msvc
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-pc-windows-msvc
      - name: pull aarch64-pc-windows-msvc
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-pc-windows-msvc
      - name: pull js files
        uses: actions/download-artifact@v4
        with:
          name: js-files
      - name: display artifacts
        run: ls -R
      - name: install deps
        run: yarn install
      - name: copy artifacts
        run: |
          mkdir artifacts
          cp *.node artifacts
          yarn artifacts
      - name: Check changes
        id: check_changes
        run: |
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
          OLD_PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")

          # Generate changes from beachball, including package.json version bump
          yarn beachball bump

          # check for changes
          PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
          if [ "$OLD_PACKAGE_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "HAS_CHANGES=true" >> "$GITHUB_OUTPUT"
          else
            echo "HAS_CHANGES=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
      - name: Publish
        if: ${{ steps.check_changes.outputs.HAS_CHANGES == 'true' }}
        run: |
          git config user.email "mhuan13@gmail.com"
          git config user.name "$GITHUB_ACTOR"

          # sync new package verson to napi-managed packages (ignored by beachball)
          yarn napi version -c package.json

          # Commit changes and tag with a version
          PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
          git commit -am "v$PACKAGE_VERSION"

          # Push updated branch to git main branch
          git tag "v$PACKAGE_VERSION"
          git push origin main --tags

          # Required to do github releasing from napi & prep `optionalDependencies` in package.json
          # for final publish
          yarn prepublishOnly

          # Publish all packages 
          yarn npm publish --tag "latest" --access public --tolerate-republish
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.BEACHBALL_PUSH_PAT }}
          GITHUB_ACTOR: autobot
